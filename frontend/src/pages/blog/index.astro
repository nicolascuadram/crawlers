---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("blog")).sort(
    (a, b) => b.data.created_at.valueOf() - a.data.created_at.valueOf()
);

const sources = [...new Set(posts.map((post) => post.data.sourcename))];

// Separar primer post destacado
const featuredPost = posts[0];
const newsPosts = posts.slice(1);

const formatTitle = (title: string, length: number) => {
    return title.length > length ? title.substring(0, length) + "..." : title;
};
---
<!doctype html>
<html lang="es">
    <head>
        <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    </head>
    <body>
        <Header />
        <main>
            <!-- Post destacado -->
            <section class="featured-post">
                <a href={`/blog/${featuredPost.id}/`}>
                    <img src={featuredPost.data.heroImage} alt="" class="featured-img" />
                    <h2>{formatTitle(featuredPost.data.title, 200)}</h2>
                    <p class="date"><FormattedDate date={featuredPost.data.created_at} /></p>
                </a>
            </section>

            <h3 class="section-title">Últimas Noticias</h3>

            <!-- Barra de filtros -->
            <section class="search-filter-bar">
                <input type="text" class="search-input" id="search-input" placeholder="Buscar por título..." />
                <div class="filters">
                    <select id="source-filter" class="filter-select">
                        <option value="all">Todas las fuentes</option>
                        {sources.map((source) => <option value={source}>{source}</option>)}
                    </select>
                    <button id="sort-button" class="sort-button" aria-label="Cambiar orden de fecha">
                        <svg id="sort-icon" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="icon" viewBox="0 0 24 24">
                            <path d="m6 9 6 6 6-6"></path>
                        </svg>
                    </button>
                </div>
            </section>

            <!-- Lista de noticias con paginación -->
            <section id="post-section">
                <ul id="post-list">
                    {newsPosts.map((post, i) => (
                        <li
                            data-title={post.data.title.toLowerCase()}
                            data-date={post.data.created_at.valueOf()}
                            data-source={post.data.sourcename}
                            class="post-item"
                            style="display: none"
                        >
                            <a href={`/blog/${post.id}/`}>
                                <img src={post.data.heroImage} alt="" width={720} height={360} />
                                <h4 class="title">{formatTitle(post.data.title, 150)}</h4>
                                <p class="date"><FormattedDate date={post.data.created_at} /></p>
                            </a>
                        </li>
                    ))}
                </ul>
                <div class="pagination">
                    <button id="prev-page" class="pagination-btn" disabled>Anterior</button>
                    <span id="page-info" class="page-info">Página 1</span>
                    <button id="next-page" class="pagination-btn">Siguiente</button>
                </div>
                <div class="element-count" id="element-count">
                    Posts mostrados: (0/{newsPosts.length})
                </div>
            </section>
        </main>
        <Footer />

        <!-- Script de paginación -->
        <script is:inline>
            document.addEventListener("DOMContentLoaded", () => {
                const input = document.getElementById("search-input");
                const sourceSelect = document.getElementById("source-filter");
                const sortButton = document.getElementById("sort-button");
                const sortIcon = document.getElementById("sort-icon");
                const list = document.getElementById("post-list");
                const items = Array.from(list.querySelectorAll(".post-item"));
                const prevBtn = document.getElementById("prev-page");
                const nextBtn = document.getElementById("next-page");
                const pageInfo = document.getElementById("page-info");
                const elementCount = document.getElementById("element-count");

                let sortOrder = "desc";
                let currentPage = 1;
                const postsPerPage = 4;
                let filtered = [];

                const filterItems = () => {
                    const query = input.value.toLowerCase();
                    const selectedSource = sourceSelect.value;
                    filtered = items.filter(item => {
                        const title = item.getAttribute("data-title");
                        const source = item.getAttribute("data-source");
                        return title.includes(query) && (selectedSource === "all" || source === selectedSource);
                    });
                    filtered.sort((a, b) => {
                        const dateA = parseInt(a.getAttribute("data-date"));
                        const dateB = parseInt(b.getAttribute("data-date"));
                        return sortOrder === "asc" ? dateA - dateB : dateB - dateA;
                    });
                };

                const updatePagination = () => {
                    const totalPages = Math.max(1, Math.ceil(filtered.length / postsPerPage));
                    currentPage = Math.max(1, Math.min(currentPage, totalPages));
                    pageInfo.textContent = `Página ${currentPage}`;

                    prevBtn.disabled = currentPage === 1;
                    nextBtn.disabled = currentPage === totalPages;

                    items.forEach(item => item.style.display = "none");
                    const shownItems = filtered.slice((currentPage - 1) * postsPerPage, currentPage * postsPerPage);
                    shownItems.forEach(item => item.style.display = "block");

                    // Actualizar contador de elementos
                    const start = (currentPage - 1) * postsPerPage + 1;
					const end = Math.min(currentPage * postsPerPage, filtered.length);
					elementCount.textContent = `Posts mostrados: (${end}/${filtered.length})`;
                };

                const applyFiltersAndReset = () => {
                    filterItems();
                    currentPage = 1;
                    updatePagination();
                };

                const applyPagination = () => {
                    updatePagination();
                };

                sortButton.addEventListener("click", () => {
                    sortOrder = sortOrder === "asc" ? "desc" : "asc";
                    sortIcon.style.transform = sortOrder === "asc" ? "rotate(180deg)" : "rotate(0deg)";
                    applyFiltersAndReset();
                });
                input.addEventListener("input", applyFiltersAndReset);
                sourceSelect.addEventListener("change", applyFiltersAndReset);
                prevBtn.addEventListener("click", () => { currentPage--; applyPagination(); });
                nextBtn.addEventListener("click", () => { currentPage++; applyPagination(); });

                applyFiltersAndReset();
            });
        </script>
    </body>
</html>

<style>
    main {
		width: 840px;
		margin: auto;
		padding: 2rem 1rem;
	}
	.featured-post {
		text-align: center;
		margin-bottom: 2rem;
	}
	.featured-post img {
		width: 100%;
		border-radius: 12px;
	}
	.featured-post a {
		text-decoration: none;         /* Quitar subrayado del enlace */
		color: black;                  /* Asegurar color negro */
	}
	.featured-post h2 {
		margin: 1rem 0 0.5rem;
		font-size: 2rem;
		color: var(--black);         /* Asegura color negro */
		text-decoration: none;       /* Quita subrayado */
		border-bottom: none;         /* Quita borde inferior si lo hubiera */
	}
	.section-title {
		font-size: 1.8rem;
		margin: 2rem 0 1rem;
	}
	.search-filter-bar {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		align-items: center;
		margin-bottom: 1rem;
	}
	.search-input {
		flex: 1;
		padding: 0.5rem 1rem;
		border-radius: 8px;
		border: 1px solid #ccc;
	}
	.filters {
		display: flex;
		gap: 0.5rem;
	}
	.filter-select,
	.sort-button {
		padding: 0.5rem;
		border-radius: 8px;
		border: 1px solid #ccc;
	}
	.sort-button {
		background-color: #ba0c2f;
		color: white;
		cursor: pointer;
	}
	ul {
		list-style: none;
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		padding: 0;
	}
	ul li {
		width: calc(50% - 0.5rem);
	}
	ul li img {
		width: 100%;
		border-radius: 8px;
	}
	ul li .title {
		font-size: 1.2rem;
		margin: 0.5rem 0 0;
		color: var(--black);         
		text-decoration: none;       
		border-bottom: none;         
	}
	ul li .title a {
		color: var(--black);         
		text-decoration: none;     
		border-bottom: none;
	}
	ul li .title a:hover {
		text-decoration: underline;
	}
	ul li a {
		text-decoration: none;    
		color: black;              
	}

	ul li h4 {
		color: black;             
		text-decoration: none;     
		margin: 0.5rem 0 0;
		font-size: 1.2rem;
	}

	ul li h4 a {
		color: black;                
		text-decoration: none;         
	}

	ul li h4 a:hover {
		text-decoration: underline;    
	}
	ul li.post-item:hover {
		box-shadow: 0 4px 16px rgba(0,0,0,0.12);
		transform: translateY(-4px) scale(1.02);
		transition: box-shadow 0.2s, transform 0.2s;
		z-index: 1;
	}
	ul li.post-item:hover .title {
		text-decoration: underline;
		color: #ba0c2f; /* opcional: subraya y cambia a rojo institucional */
		transition: color 0.2s;
	}
	.date {
		color: #888;
		font-size: 0.9rem;
	}
	.pagination {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 1rem;
		margin-top: 2rem;
	}
	.pagination-btn {
		padding: 0.5rem 1rem;
		border: none;
		background-color: #ba0c2f;
		color: white;
		cursor: pointer;
		border-radius: 8px;
	}
	.pagination-btn:disabled {
		background-color: #ccc;
		cursor: default;
	}
	.element-count {
		text-align: center;
		margin-top: 1rem;
		color: #555;
		font-size: 1rem;
	}
	@media (max-width: 720px) {
		ul li {
			width: 100%;
		}
	}
</style>